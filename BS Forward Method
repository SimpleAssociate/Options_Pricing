#include <cmath>
#include <vector>
#include <algorithm>
#include <iostream>
#include <string>
using namespace std; 

class BlackScholes { 
    public: 
    vector<double> solve(double volatility, double nx, double timeSteps,
                        double expiration, double maxPrice, double strike, double intRate); 
};

vector<double> BlackScholes :: solve(   double volatility, 
                                        double nx, 
                                        double timeSteps,
                                        double expiration,
                                        double maxPrice,
                                        double strike,
                                        double intRate)
{
    double dt = expiration/timeSteps; 
    double dx = maxPrice/nx; 
    
    vector<double> a(nx-1);
    vector<double> b(nx-1);
    vector<double> c(nx-1);
    
    int i; 
    for(i = 0; i<nx-1;i++)
    {
        b[i] = 1.0-intRate*dt-dt*pow(volatility*(i+1),2);
    }
    
    for(i = 0; i<nx-2; i++)
    {
        c[i] = 0.5 * dt*pow(volatility*(i+1),2) + 0.5 * dt* intRate * (i+1);
    }
    
    for(i=1;i<nx-1;i++)
    {
        a[i] = 0.5*dt*pow(volatility*(i+1),2) - 0.5*dt*intRate * (i+1);
    }
    
    vector<double> u((nx-1)*(timeSteps+1));
    
    double u0 = 0.0;
    
    for(i=0;i<nx-1;i++)
    {
        u0+=dx;
        u[i+u0*(nx-1)] = std::max(u0-strike,0.0);
    }
    
    for(int j = 0; j<timeSteps; j++)
    {
        double t = (double)(j) * expiration/timeSteps; 
        double p = 0.5*dt*(nx-1)*(volatility*volatility*(nx-1)+intRate)*
        (maxPrice-strike*exp(-intRate*t));
        
        for(i = 0; i<nx-1; i++)
        {
            u[i+(j+1)*(nx-1)] = b[i] * u[i+j*(nx-1)];
        }
        
        for(i = 0; i < nx-2; i++)
        {
            u[i+(j+1)*(nx-1)] += c[i] * u[i+1+j*(nx-1)];
        }
        
        for(i=1; i<nx-1; i++)
        {
            u[i+(j+1)*(nx-1)] += a[i] * u[i-1+j*(nx-1)];
        }
        
        u[nx-2+(j+1)*(nx-1)] += p;
    }
    return u; 
}


int main()
{
  double strike = 5.0; 
  double intRate = .03; 
  double sigma = .5; 
  double t1 = 1.0;
  double numSteps = 11; 
  double numDays = 29; 
  double maxPrice = 10;
  
  BlackScholes BS; 
  
  vector<double> prices = BS.solve(sigma, numSteps, numDays, t1, maxPrice, strike, intRate); 
  
  double minPrice = 0.0;
  
  for (int i = 0; i<numSteps-1; i++)
  { 
      double s = ((numSteps-i-2)*minPrice+(i+1)*maxPrice)/(numSteps-1);
      cout<<"   "<< s << "    " << prices[i+numDays*(numSteps-1)]<<endl;
  }
  return 0; 
}

//****** Program rewritten from Practical C Programming Txtbook

